[1,["a73e5EkMVNg5eI/6hAN/QS@f9941","03K5nE5FxIWanMYRUyqwRU@f9941","f3Slcrh39HqoD0Z1YbtEUc@f9941","3bYB/2cHxEwr1JsIdQwvgT","1c392d703@6c48a","53AvToN5pKw5kirtgs5e4B@f9941","09Ii20V5ZKcKYDdbEqo++D","7b91m5AEJJ5JHLv1mnezRd","d8CVK62olPfrUv+7o72gmT","38Ky5hsa1IG7XD67zAnL/H@6c48a","95TWSQZBNAuqtpexCrmR/i@6c48a","9cJQfJwTZDiI1mJpKfYEOC@6c48a","a4O9dKZS9PB71nC4nofJBV","a5PFEQemFHUZ6p0pyQKYNx","f4XcXh0wBFra3wOkxbn95H","87vYqVTqRHj4BooUYwGhjU@f9941","31XyOnn6xNlZIiMBYRo1mX@f9941","96tc/r5o9AgJabuEtz15yk","b14fFenWRENYpWxnBYFZtZ","a0ouSLiWFKb6C7FUOaLbM8@f9941","43KnqWAalM0JlQb1HAWgcs","9cJQfJwTZDiI1mJpKfYEOC@f9941","1djrM4xUFAyoTfMRG4Ol1N@f9941","d4cjUslhxKMpuzXtM6Tn2g","b48xq+WPNMwrlVwbqdXsFy@f9941","38Ky5hsa1IG7XD67zAnL/H@f9941","f2K2y/XmxLeIdKho1Y+yhC","95TWSQZBNAuqtpexCrmR/i@f9941","09TJgVMI5OLLaaGpKQHSpM","7dj5uJT9FMn6OrOOx83tfK@f9941","acv4LyA0ZAAYim2Ezeb05L@f9941","5c96wa+AVJzILYh+oSai5R@6c48a","52u1TsaBNIGrf7zCcKGTRX"],["node","_spriteFrame","targetInfo","root","asset","_textureSource","_customMaterial","_effectAsset","_cameraComponent","data","_parent","value","canvasPrefab","scene","u_dissolveMap"],[["cc.Node",["_name","_layer","_active","_objFlags","__editorExtras__","_id","_components","_parent","_prefab","_lpos","_children","_lscale"],-3,9,1,4,5,2,5],["cc.Sprite",["_sizeMode","_isTrimmedMode","node","_spriteFrame","_customMaterial","_color","__prefab"],1,1,6,6,5,4],"cc.ImageAsset","cc.Texture2D","cc.SpriteFrame",["cc.Node",["_name","_objFlags","_parent","_components","_prefab","_lpos","__editorExtras__"],1,1,2,4,5,11],["cc.Material",["_name","_states","_defines","_techIdx","_props"],-1,12],["cc.UITransform",["node","_contentSize","__prefab"],3,1,5,4],["cc.Canvas",["node","_cameraComponent","__prefab"],3,1,1,4],["cc.Widget",["_alignFlags","node","__prefab"],2,1,4],["cc.PrefabInfo",["fileId","instance","nestedPrefabInstanceRoots","targetOverrides","root","asset"],-1,1,1],["cc.PrefabInfo",["fileId","nestedPrefabInstanceRoots","targetOverrides","root","instance","asset"],0,1,4,6],["cc.Camera",["_projection","_priority","_orthoHeight","_far","_visibility","_clearFlags","node","_color","__prefab"],-3,1,5,4],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedChildren"],1,9,9],["RenderQueueDesc",["stages","isTransparent","sortMode"],0],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["root","asset","fileId","instance","targetOverrides","nestedPrefabInstanceRoots"],-1,9,2],["cc.EffectAsset",["_name","shaders","techniques"],0],["d1e977IHVBDdqqFsaAxxXZ8",["node","__prefab"],3,1,4],["6182aWy6SxND5aqg/O1/Qwt",["node","__prefab","canvasPrefab"],3,1,4,6],["cc.PhysicsMaterial",["_name","_friction","_rollingFriction","_spinningFriction","_restitution"],-2],["cc.SceneAsset",["_name"],2],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["cc.TargetInfo",["localID"],2],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.TargetOverrideInfo",["propertyPath","source","sourceInfo","target","targetInfo"],2,1,4,1,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","skin","lightProbeInfo","postSettings"],3,4,4,4,4,4,4,4,4],["cc.AmbientInfo",["_skyColorHDR","_groundAlbedoHDR","_skyColorLDR"],3,5,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.SkinInfo",[],3],["cc.LightProbeInfo",[],3],["cc.PostSettingsInfo",[],3],["ForwardPipeline",["_flows"],3,9],["ShadowFlow",["_name","_stages"],2,9],["ShadowStage",["_name"],2],["ForwardFlow",["_name","_priority","_stages"],1,9],["ForwardStage",["_name","renderQueues"],2,9]],[[24,0,2],[28,0,1,2,2],[7,0,1,1],[16,0,2],[1,2,3,1],[27,0,1,2,3],[25,0,1,2,2],[10,0,1,3,2,4,5,5],[5,1,2,4,6,2],[11,0,2,1,3,4,5,4],[18,0,1,2,4],[13,0,1,2,3],[0,0,7,10,6,9,2],[0,0,7,6,2],[0,0,7,6,9,2],[7,0,2,1,1],[26,0,1,2,3],[6,0,1,2,4,4],[6,0,3,1,2,4,5],[15,0,2],[0,0,7,6,8,2],[0,0,2,7,6,3],[0,0,7,6,9,11,2],[10,0,1,2,3,4,5,5],[11,0,1,2,3,4,5,4],[1,1,2,4,3,2],[13,0,1,3,2,3],[23,0,1,1],[29,0,1,2,2],[31,0,1,2,3,4,2],[0,0,3,1,10,6,8,9,4],[0,0,2,1,7,6,8,4],[0,0,2,1,7,6,8,11,4],[0,0,10,8,2],[0,3,4,8,3],[0,0,2,5,10,6,9,4],[0,3,4,7,8,3],[0,0,2,1,7,6,9,4],[0,0,1,7,6,9,3],[0,0,2,1,7,6,11,4],[5,0,1,2,3,4,5,3],[5,0,2,3,5,2],[8,0,2,1,1],[8,0,1,1],[9,0,1,2,2],[9,0,1,2],[17,0,1,2,3,4,5,5],[1,2,6,5,3,1],[1,2,6,3,1],[1,2,5,3,1],[1,0,1,2,4,3,3],[1,2,4,3,1],[1,0,2,5,4,3,2],[12,0,1,2,3,4,6,8,7,6],[12,0,1,2,3,5,4,6,7,7],[19,0,1,1],[20,0,1,2,1],[21,0,1,2,3,4,6],[22,0,2],[30,0,1,2,3,2],[32,0,1,2,3,4,5,6,7,1],[33,0,1,2,1],[34,0,1,1],[35,1],[36,1],[37,1],[38,1],[39,1],[40,1],[41,0,1],[42,0,1,2],[43,0,2],[44,0,1,2,3],[45,0,1,2],[14,0,2],[14,1,2,0,4]],[[[[17,"Learn",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"outlineWidth":0.06},"outlineColor",8,[2,0.3,0.5,0.3,-1.4]]],11]]],0,0,[0],[7],[7]],[[[18,"material1",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"isA2C":true,"targets":[{"blendSrc":7}]}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":0.4,"u_gradientRatio":0.92},"u_outerColor",8,[2,0.4,0.4,0.4,1.7],"u_outerColor2",8,[2,3,3,3,0]]],11]]],0,0,[0],[7],[8]],[[{"fmt":"7@96_6@72_0_5@85","w":1482,"h":1926},-1],[2],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["1c392d703"]}],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["38Ky5hsa1IG7XD67zAnL/H"]}],[3],0,[],[],[]],[[{"name":"20250218-165855","rect":{"x":0,"y":0,"width":380,"height":200},"offset":{"x":0,"y":0},"originalSize":{"width":380,"height":200},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-190,-100,0,190,-100,0,-190,100,0,190,100,0],"indexes":[0,1,2,2,1,3],"uv":[0,200,380,200,0,0,380,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-190,"y":-100,"z":0},"maxPos":{"x":190,"y":100,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[5],[9]],[[[19,"Canvas"],[30,"Canvas",512,33554432,[-6,-7,-8],[[15,-2,[3,"de65jKLzFOOYWJfEu3oi6j"],[5,1920,1080]],[42,-4,[3,"40TF+vYVFB3rpDV+CSeSMM"],-3],[44,45,-5,[3,"c0INmC+S5Aso4okA70QaOQ"]]],[23,"adDxi8bRVJ/5i4XA64eUf1",null,null,[],-1,0],[1,960,540,0]],[31,"Preview",false,33554432,1,[[15,-9,[3,"9aVjc/dn9B+45iNNqx/uSk"],[5,1920,1080]],[47,-10,[3,"d0CNVzTe5Lr4unW/pq2lNp"],[4,1191182335],0]],[7,"62MVq4S8hFH7sYeJpjaxSl",null,null,null,1,0]],[32,"Mobile_Preview",false,33554432,1,[[15,-11,[3,"f1mSEs/BFL+qc5OKc5ra4O"],[5,390,844]],[48,-12,[3,"f61/iN2apImIUxEeIAVVJN"],1]],[7,"babXG8rL5JR7jHu9FLjl02",null,null,null,1,0],[1,2.77,2.77,1]],[40,"Camera",512,1,[-13],[7,"19qK2tGrdHqJpmOBkdCrrT",null,null,null,1,0],[1,0,0,1000]],[53,0,1073741824,564.9097472924188,2000,33554432,4,[3,"a5lesTvAVK5IwLyIzdmYI3"],[4,4278190080]]],0,[0,3,1,0,0,1,0,8,5,0,0,1,0,0,1,0,-1,4,0,-2,2,0,-3,3,0,0,2,0,0,2,0,0,3,0,0,3,0,-1,5,0,9,1,13],[0,0],[1,1],[0,2]],[[[10,"../test/Test",[{"hash":605226959,"name":"../test/Test|vs:vert|fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"ConstantF","stageFlags":16,"binding":1,"members":[{"name":"dissolveColor","type":16,"count":1},{"name":"dissolveValue","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"u_dissolveMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"ConstantF","stageFlags":16,"binding":1,"members":[{"name":"dissolveColor","type":16,"count":1},{"name":"dissolveValue","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"u_dissolveMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec4 color;\nlayout(std140) uniform ConstantF {\n  vec4  dissolveColor;\n  float dissolveValue;\n};\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D u_dissolveMap;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o  = vec4(1, 1, 1, 1);\n  float value = 1.0;\n  #if USE_TEXTURE\n    vec4 dissolveMap = CCSampleWithAlphaSeparated(u_dissolveMap, uv0);\n    value *= dissolveMap.r;\n  #endif\n  if(value < dissolveValue)\n  {\n      discard;\n  }\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n  #endif\n  o *= color;\n  if(value < dissolveValue + 0.05 && o.a > 0.0){\n    o = dissolveColor;\n  }\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 color;\n   uniform vec4 dissolveColor;\n   uniform float dissolveValue;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D u_dissolveMap;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o  = vec4(1, 1, 1, 1);\n  float value = 1.0;\n  #if USE_TEXTURE\n    vec4 dissolveMap = CCSampleWithAlphaSeparated(u_dissolveMap, uv0);\n    value *= dissolveMap.r;\n  #endif\n  if(value < dissolveValue)\n  {\n      discard;\n  }\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n  #endif\n  o *= color;\n  if(value < dissolveValue + 0.05 && o.a > 0.0){\n    o = dissolveColor;\n  }\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":42,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":45}},"defines":[{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"../test/Test|vs:vert|fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4}]},"properties":{"u_dissolveMap":{"value":"white","type":28},"dissolveValue":{"type":13,"value":[0]},"dissolveColor":{"type":16,"value":[0,0,0,1]}}}]}]]],0,0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["5c96wa+AVJzILYh+oSai5R"]}],[3],0,[],[],[]],[[[10,"../test/Learn",[{"hash":131446161,"name":"../test/Learn|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Outline","stageFlags":16,"binding":1,"members":[{"name":"outlineColor","type":16,"count":1},{"name":"u_textureSize","type":14,"count":1},{"name":"outlineWidth","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Outline","stageFlags":16,"binding":1,"members":[{"name":"outlineColor","type":16,"count":1},{"name":"u_textureSize","type":14,"count":1},{"name":"outlineWidth","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec4 color;\nlayout(std140) uniform Outline {\n  vec4  outlineColor;\n  vec2  u_textureSize;\n  float outlineWidth;\n};\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n      vec2 v_uv0 = uv0;\n      float halfTex = (u_textureSize.x + u_textureSize.y) / 2.0;\n      vec2 ratio = vec2(u_textureSize.y / halfTex, u_textureSize.x / halfTex);\n      float alpha_Left = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(outlineWidth * ratio.x, 0)).a;\n      float alpha_Right = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(-outlineWidth * ratio.x, 0)).a;\n      float alpha_Top = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(0, outlineWidth * ratio.y)).a;\n      float alpha_Bottom = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(0, -outlineWidth * ratio.y)).a;\n      float alpha_LeftTop = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(outlineWidth * ratio.x, outlineWidth * ratio.y)).a;\n      float alpha_RightTop = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(-outlineWidth * ratio.x, outlineWidth * ratio.y)).a;\n      float alpha_RightBottom = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(-outlineWidth * ratio.x, -outlineWidth * ratio.y)).a;\n      float alpha_LeftBottom = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(outlineWidth * ratio.x, -outlineWidth * ratio.y)).a;\n      float outlineAlpha = alpha_Left + alpha_Right + alpha_Top + alpha_Bottom\n      + alpha_LeftTop + alpha_RightTop + alpha_RightBottom + alpha_LeftBottom;\n      vec4 finalColor = mix(outlineColor, o.rgba, o.a);\n      finalColor.a = outlineAlpha;\n      o = finalColor;\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n   uniform vec4 outlineColor;\n   uniform vec2 u_textureSize;\n   uniform float outlineWidth;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n      vec2 v_uv0 = uv0;\n      float halfTex = (u_textureSize.x + u_textureSize.y) / 2.0;\n      vec2 ratio = vec2(u_textureSize.y / halfTex, u_textureSize.x / halfTex);\n      float alpha_Left = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(outlineWidth * ratio.x, 0)).a;\n      float alpha_Right = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(-outlineWidth * ratio.x, 0)).a;\n      float alpha_Top = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(0, outlineWidth * ratio.y)).a;\n      float alpha_Bottom = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(0, -outlineWidth * ratio.y)).a;\n      float alpha_LeftTop = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(outlineWidth * ratio.x, outlineWidth * ratio.y)).a;\n      float alpha_RightTop = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(-outlineWidth * ratio.x, outlineWidth * ratio.y)).a;\n      float alpha_RightBottom = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(-outlineWidth * ratio.x, -outlineWidth * ratio.y)).a;\n      float alpha_LeftBottom = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0 + vec2(outlineWidth * ratio.x, -outlineWidth * ratio.y)).a;\n      float outlineAlpha = alpha_Left + alpha_Right + alpha_Top + alpha_Bottom\n      + alpha_LeftTop + alpha_RightTop + alpha_RightBottom + alpha_LeftBottom;\n      vec4 finalColor = mix(outlineColor, o.rgba, o.a);\n      finalColor.a = outlineAlpha;\n      o = finalColor;\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":46}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"passes":[{"program":"../test/Learn|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"outlineWidth":{"type":13,"value":[0.5]},"outlineColor":{"type":16,"value":[0.5,0.5,0.5,0.5]},"u_textureSize":{"type":14,"value":[380,200]}}}]}]]],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["95TWSQZBNAuqtpexCrmR/i"]}],[3],0,[],[],[]],[[{"name":"Random_Disable","rect":{"x":0,"y":0,"width":193,"height":103},"offset":{"x":0,"y":0},"originalSize":{"width":193,"height":103},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-96.5,-51.5,0,96.5,-51.5,0,-96.5,51.5,0,96.5,51.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,103,193,103,0,0,193,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-96.5,"y":-51.5,"z":0},"maxPos":{"x":96.5,"y":51.5,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[5],[10]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["9cJQfJwTZDiI1mJpKfYEOC"]}],[3],0,[],[],[]],[[{"name":"Player-001","rect":{"x":0,"y":0,"width":80,"height":80},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":80},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-40,-40,0,40,-40,0,-40,40,0,40,40,0],"indexes":[0,1,2,2,1,3],"uv":[0,80,80,80,0,0,80,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-40,"y":-40,"z":0},"maxPos":{"x":40,"y":40,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[5],[11]],[[[10,"../test/effect2",[{"hash":1092220921,"name":"../test/effect2|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"u_inColor","type":16,"count":1},{"name":"u_inColor2","type":16,"count":1},{"name":"u_textureSize","type":14,"count":1},{"name":"u_edgeThreshold","type":13,"count":1},{"name":"u_alpha","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"u_inColor","type":16,"count":1},{"name":"u_inColor2","type":16,"count":1},{"name":"u_textureSize","type":14,"count":1},{"name":"u_edgeThreshold","type":13,"count":1},{"name":"u_alpha","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec2 v_uv;\nvec4 vert () {\n  vec4 pos = cc_matViewProj * vec4(a_position, 1.0);\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec2 v_uv;\nlayout(std140) uniform Constant {\n  vec4  u_inColor;\n  vec4  u_inColor2;\n  vec2  u_textureSize;\n  float u_edgeThreshold;\n  float u_alpha;\n};\nuniform sampler2D cc_spriteTexture;\nfloat sobelEdgeDetection(sampler2D _texture, vec2 uv, vec2 texelSize) {\n    const mat3 sobelX = mat3(\n        -1,  0,  1,\n        -2,  0,  2,\n        -1,  0,  1\n    );\n    const mat3 sobelY = mat3(\n        -1, -2, -1,\n         0,  0,  0,\n         1,  2,  1\n    );\n    float Gx = 0.0;\n    float Gy = 0.0;\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            vec2 sampleUV = clamp(uv + vec2(i, j) * texelSize, vec2(0.0), vec2(1.0));\n            float sampleAlpha = texture(_texture, sampleUV).a;\n            Gx += sampleAlpha * sobelX[j + 1][i + 1];\n            Gy += sampleAlpha * sobelY[j + 1][i + 1];\n        }\n    }\n    return sqrt(Gx * Gx + Gy * Gy);\n}\nvec4 frag () {\n  vec4 texColor = texture(cc_spriteTexture, v_uv);\n  if (texColor.a <= u_alpha) {\n    return vec4(0.0, 0.0, 0.0, 0.0);\n  }\n  vec2 texelSize = 1.0 / u_textureSize;\n  float edgeStrength = sobelEdgeDetection(cc_spriteTexture, v_uv, texelSize);\n  vec4 finalColor = (edgeStrength > u_edgeThreshold) ? u_inColor : u_inColor2;\n  ALPHA_TEST(finalColor);\n  return finalColor;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec2 v_uv;\nvec4 vert () {\n  vec4 pos = cc_matViewProj * vec4(a_position, 1.0);\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec2 v_uv;\n   uniform vec4 u_inColor;\n   uniform vec4 u_inColor2;\n   uniform vec2 u_textureSize;\n   uniform float u_edgeThreshold;\n   uniform float u_alpha;\nuniform sampler2D cc_spriteTexture;\nfloat sobelEdgeDetection(sampler2D _texture, vec2 uv, vec2 texelSize) {\n    const mat3 sobelX = mat3(\n        -1,  0,  1,\n        -2,  0,  2,\n        -1,  0,  1\n    );\n    const mat3 sobelY = mat3(\n        -1, -2, -1,\n         0,  0,  0,\n         1,  2,  1\n    );\n    float Gx = 0.0;\n    float Gy = 0.0;\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            vec2 sampleUV = clamp(uv + vec2(i, j) * texelSize, vec2(0.0), vec2(1.0));\n            float sampleAlpha = texture2D(_texture, sampleUV).a;\n            Gx += sampleAlpha * sobelX[j + 1][i + 1];\n            Gy += sampleAlpha * sobelY[j + 1][i + 1];\n        }\n    }\n    return sqrt(Gx * Gx + Gy * Gy);\n}\nvec4 frag () {\n  vec4 texColor = texture2D(cc_spriteTexture, v_uv);\n  if (texColor.a <= u_alpha) {\n    return vec4(0.0, 0.0, 0.0, 0.0);\n  }\n  vec2 texelSize = 1.0 / u_textureSize;\n  float edgeStrength = sobelEdgeDetection(cc_spriteTexture, v_uv, texelSize);\n  vec4 finalColor = (edgeStrength > u_edgeThreshold) ? u_inColor : u_inColor2;\n  ALPHA_TEST(finalColor);\n  return finalColor;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":42,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":48}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"../test/effect2|sprite-vs:vert|sprite-fs:frag","properties":{"alphaThreshold":{"type":13,"value":[0.5]},"u_edgeThreshold":{"type":13,"value":[0.7]},"u_alpha":{"type":13,"value":[0.95]},"u_inColor":{"type":16,"value":[1,0,0,1]},"u_inColor2":{"type":16,"value":[1,1,0,0]},"u_textureSize":{"type":14,"value":[1,1]}}}]},{"name":"transparent","passes":[{"program":"../test/effect2|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"u_edgeThreshold":{"type":13,"value":[0.7]},"u_alpha":{"type":13,"value":[0.95]},"u_inColor":{"type":16,"value":[1,0,0,1]},"u_inColor2":{"type":16,"value":[1,1,0,0]},"u_textureSize":{"type":14,"value":[1,1]}}}]}]]],0,0,[],[],[]],[[[19,"Base"],[33,"Base",[-2,-3],[23,"51kkQ7iQ1A9oYX6QquqA18",null,null,[],-1,0]],[20,"RequestContorl",1,[[55,-4,[3,"4e3CRjCK5KyaWBtv/NMBNX"]]],[7,"86QtYSIwpD/IIm0rw9VLY/",null,null,null,1,0]],[20,"GameContorl",1,[[56,-5,[3,"21Z4RASRVHPIV6ANenSxeg"],0]],[7,"6eBtqcqjZMcIK4p1wy1rL6",null,null,null,1,0]]],0,[0,3,1,0,-1,2,0,-2,3,0,0,2,0,0,3,0,9,1,5],[0],[12],[3]],[[{"name":"Web_Preview","rect":{"x":3,"y":3,"width":1920,"height":1080},"offset":{"x":0,"y":0},"originalSize":{"width":1920,"height":1080},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[5],[4]],[[[57,"default-physics-material",0.8,0.1,0.1,0.1]],0,0,[],[],[]],[[[18,"material2",1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{"alphaThreshold":0.4,"u_edgeThreshold":0.5,"u_alpha":0.97},"u_textureSize",8,[0,354,185]]],11]]],0,0,[0],[7],[12]],[[[10,"../test/effect",[{"hash":131745080,"name":"../test/effect|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"u_innerColor","type":16,"count":1},{"name":"u_outerColor","type":16,"count":1},{"name":"u_outerColor2","type":16,"count":1},{"name":"u_outsideColor","type":16,"count":1},{"name":"u_innerRadius","type":13,"count":1},{"name":"u_radius","type":13,"count":1},{"name":"u_gradientRatio","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"u_innerColor","type":16,"count":1},{"name":"u_outerColor","type":16,"count":1},{"name":"u_outerColor2","type":16,"count":1},{"name":"u_outsideColor","type":16,"count":1},{"name":"u_innerRadius","type":13,"count":1},{"name":"u_radius","type":13,"count":1},{"name":"u_gradientRatio","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec2 v_uv;\nvec4 vert () {\n  vec4 pos = cc_matViewProj * vec4(a_position, 1.0);\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec2 v_uv;\nlayout(std140) uniform Constant {\n  vec4 u_innerColor;\n  vec4 u_outerColor;\n  vec4 u_outerColor2;\n  vec4 u_outsideColor;\n  float u_innerRadius;\n  float u_radius;\n  float u_gradientRatio;\n};\n#if USE_TEXTURE\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec2 uv = v_uv - vec2(0.5);\n  float dist = length(uv);\n  float inInner = step(u_innerRadius, dist);\n  float inOuter = step(u_radius, dist);\n  float gradBase = 1.0 - v_uv.y;\n  float offset = u_gradientRatio - 0.5;\n  float grad = clamp(gradBase + offset, 0.0, 1.0);\n  vec4 ringGradient = mix(u_outerColor2, u_outerColor, grad);\n  vec4 circleColor = mix(u_innerColor, ringGradient, inInner);\n  vec4 finalColor = mix(circleColor, u_outsideColor, inOuter);\n  #if USE_TEXTURE\n    vec4 texColor = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv);\n    finalColor *= texColor;\n  #endif\n  ALPHA_TEST(finalColor);\n  return finalColor;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec2 v_uv;\nvec4 vert () {\n  vec4 pos = cc_matViewProj * vec4(a_position, 1.0);\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec2 v_uv;\n   uniform vec4 u_innerColor;\n   uniform vec4 u_outerColor;\n   uniform vec4 u_outerColor2;\n   uniform vec4 u_outsideColor;\n   uniform float u_innerRadius;\n   uniform float u_radius;\n   uniform float u_gradientRatio;\n#if USE_TEXTURE\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec2 uv = v_uv - vec2(0.5);\n  float dist = length(uv);\n  float inInner = step(u_innerRadius, dist);\n  float inOuter = step(u_radius, dist);\n  float gradBase = 1.0 - v_uv.y;\n  float offset = u_gradientRatio - 0.5;\n  float grad = clamp(gradBase + offset, 0.0, 1.0);\n  vec4 ringGradient = mix(u_outerColor2, u_outerColor, grad);\n  vec4 circleColor = mix(u_innerColor, ringGradient, inInner);\n  vec4 finalColor = mix(circleColor, u_outsideColor, inOuter);\n  #if USE_TEXTURE\n    vec4 texColor = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv);\n    finalColor *= texColor;\n  #endif\n  ALPHA_TEST(finalColor);\n  return finalColor;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":42,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":50}},"defines":[{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"../test/effect|sprite-vs:vert|sprite-fs:frag","properties":{"alphaThreshold":{"type":13,"value":[0.5]},"u_innerColor":{"type":16,"value":[0,0,0,0]},"u_outerColor":{"type":16,"value":[0.05,0.05,0.05,0.5]},"u_outerColor2":{"type":16,"value":[2.3,2.3,2.3,0.4]},"u_outsideColor":{"type":16,"value":[0,0,0,0]},"u_innerRadius":{"type":13,"value":[0.435]},"u_radius":{"type":13,"value":[0.5]},"u_gradientRatio":{"type":13,"value":[1.22]}}}]},{"name":"transparent","passes":[{"program":"../test/effect|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"u_innerColor":{"type":16,"value":[0,0,0,0]},"u_outerColor":{"type":16,"value":[0.05,0.05,0.05,0.5]},"u_outerColor2":{"type":16,"value":[2.3,2.3,2.3,0.4]},"u_outsideColor":{"type":16,"value":[0,0,0,0]},"u_innerRadius":{"type":13,"value":[0.435]},"u_radius":{"type":13,"value":[0.5]},"u_gradientRatio":{"type":13,"value":[1.22]}}}]}]]],0,0,[],[],[]],[[[58,"Game"],[34,512,{},[24,"adDxi8bRVJ/5i4XA64eUf1",null,[],-6,[26,"03G43ywatCDKbok4kWfdCU",null,[[27,[0,["adDxi8bRVJ/5i4XA64eUf1"]],[-1,-2,-3,-4,-5]]],[[6,["_contentSize"],[0,["de65jKLzFOOYWJfEu3oi6j"]],[5,1920.0000000000002,1080]],[16,"Canvas",["_name"],[0,["adDxi8bRVJ/5i4XA64eUf1"]]],[6,["_lpos"],[0,["adDxi8bRVJ/5i4XA64eUf1"]],[1,960,540,0]],[6,["_lrot"],[0,["adDxi8bRVJ/5i4XA64eUf1"]],[3,0,0,0,1]],[6,["_euler"],[0,["adDxi8bRVJ/5i4XA64eUf1"]],[1,0,0,0]],[16,false,["_active"],[0,["adDxi8bRVJ/5i4XA64eUf1"]]],[16,false,["_active"],[0,["62MVq4S8hFH7sYeJpjaxSl"]]]]],1]],[35,"Canvas",false,"96JBvESmlBII8IwVirrGbp",[-11,-12,-13,-14,-15,-16,-17],[[2,-7,[5,1920.0000000000002,1080]],[43,-9,-8],[45,45,-10]],[1,959.9999999999999,540,0]],[8,512,1,[9,"6axKeaPDFFZbt5HslGTKA4",null,null,-24,[26,"f6BpkyxrRMXYBaVvIWliWZ",null,[[27,[0,["6axKeaPDFFZbt5HslGTKA4"]],[-22,-23]]],[[5,"PanelBG",["_name"],-18],[1,["_lpos"],-19,[1,0,0,0]],[1,["_lrot"],-20,[3,0,0,0,1]],[1,["_euler"],-21,[1,0,0,0]],[28,["_spriteFrame"],[0,["3cf7pA8OJH8r0ccUp2zGjK"]],5]]],2],[{},"mountedRoot",1,1]],[12,"Node",2,[-27,-28,-29,-30,-31],[[2,-25,[5,193,103]],[4,-26,22]],[1,-1677.4009999999998,-329.486,0]],[59,"Game",[-36,1,2],[46,null,null,"dca21eae-136a-4e1c-89c0-0853ee7ab412",null,[[29,["outside"],3,[0,["0cSagiaxJIYZwgNFhIg2GR"]],3,[0,["3cf7pA8OJH8r0ccUp2zGjK"]]],[29,["bonusFX"],3,[0,["0cSagiaxJIYZwgNFhIg2GR"]],3,[0,["5ct2Jno+VLvYQpIhiBgOOn"]]]],[-32,1,3,-33,-34,-35]],[60,[61,[2,0,0,0,0.520833125],[2,0,0,0,0],[2,0.2,0.5,0.8,20000]],[62,[4,4283190348],[0,512,512]],[63],[64],[65],[66],[67],[68]]],[0,["51kkQ7iQ1A9oYX6QquqA18"]],[0,["6axKeaPDFFZbt5HslGTKA4"]],[0,["a0Eup3tihGIJIY8UXwAkRo"]],[0,["a22BViTvROdawEl3va7Lwi"]],[0,["d7+90rY8pP2Kk0yopg9S4d"]],[12,"Turbo_Press",2,[-39],[[2,-37,[5,100,99]],[4,-38,26]],[1,-397.08399999999983,-383.88300000000004,0]],[12,"Turbo_Press-001",2,[-42],[[2,-40,[5,100,99]],[4,-41,28]],[1,-253.29499999999996,-382.821,0]],[36,0,{},5,[24,"51kkQ7iQ1A9oYX6QquqA18",null,[],-43,[11,"d1baqznEFFDJeEb+zFvNXW",null,[[5,"Base",["_name"],6],[1,["_lpos"],6,[1,0,0,0]],[1,["_lrot"],6,[3,0,0,0,1]],[1,["_euler"],6,[1,0,0,0]]]],0]],[37,"FX",false,33554432,3,[[2,-44,[5,873,124]],[4,-45,3]],[1,0,-37,0]],[38,"EnergyBar_FX",33554432,3,[[2,-46,[5,988,146]],[4,-47,4]],[1,0,-126,0]],[8,512,1,[9,"a0Eup3tihGIJIY8UXwAkRo",null,null,-48,[11,"14r5P4HIRCLYCZW7KuTqy2",null,[[5,"PanelGameShow",["_name"],8],[1,["_lpos"],8,[1,1.1368683772161603e-13,189,0]],[1,["_lrot"],8,[3,0,0,0,1]],[1,["_euler"],8,[1,0,0,0]]]],6],[{},"mountedRoot",1,1]],[8,512,1,[9,"a22BViTvROdawEl3va7Lwi",null,null,-59,[11,"3aknPsKwZH1IIJsWW+7s24",null,[[5,"PanelBonus",["_name"],9],[1,["_lpos"],9,[1,0,0,0]],[1,["_lrot"],9,[3,0,0,0,1]],[1,["_euler"],9,[1,0,0,0]],[6,["_contentSize"],[0,["5fCEkDrd5LnKu3ajwdTZxc"]],[5,964,122]],[28,["_spriteFrame"],[0,["c2EFp2uAxNHYbDrCdFQjCS"]],8],[5,false,["_active"],-49],[5,false,["_active"],-50],[5,false,["_active"],-51],[5,false,["_active"],-52],[5,false,["_active"],-53],[1,["_lpos"],-54,[1,-325,-30,0]],[1,["_lpos"],-55,[1,-161,-30,0]],[1,["_lpos"],-56,[1,2,-30,0]],[1,["_lpos"],-57,[1,164.0000000000001,-30,0]],[1,["_lpos"],-58,[1,328.0000000000001,-30,0]],[6,["_lpos"],[0,["8dKkDtfltBO51KfSh4v0G4"]],[1,0,-126,0]]]],7],[{},"mountedRoot",1,1]],[8,512,1,[9,"d7+90rY8pP2Kk0yopg9S4d",null,null,-60,[11,"cbzh61eI9FgpQMQviD5d5D",null,[[5,"PanelBetSelet",["_name"],10],[1,["_lpos"],10,[1,0,-184,0]],[1,["_lrot"],10,[3,0,0,0,1]],[1,["_euler"],10,[1,0,0,0]]]],9],[{},"mountedRoot",1,1]],[39,"Mobile_Preview",false,33554432,1,[[2,-61,[5,390,844]],[49,-62,[4,3372220415],10]],[1,2.77,2.77,1]],[13,"Background_Outside",2,[[2,-63,[5,1920,1080]],[4,-64,11]]],[21,"Web_Preview",false,2,[[2,-65,[5,1920,1080]],[4,-66,12]]],[14,"Shader",4,[[2,-67,[5,80,80]],[50,2,false,-68,13,14]],[1,207.27699999999993,0,0]],[22,"Shader-001",4,[[2,-69,[5,147,44]],[4,-70,15]],[1,129.529,118.69900000000001,0],[1,1.2,1.2,1.2]],[22,"Shader-002",4,[[2,-71,[5,72,72]],[51,-72,16,17]],[1,314.631,147.49099999999999,0],[1,1.2,1.2,1.2]],[14,"Shader-003",4,[[2,-73,[5,380,200]],[25,false,-74,18,19]],[1,-673.7600000000001,-419.117,0]],[14,"Shader-004",4,[[2,-75,[5,100,99]],[25,false,-76,20,21]],[1,-1033.993,-151.618,0]],[21,"Web_Preview",false,2,[[2,-77,[5,1920,1080]],[4,-78,23]]],[13,"Sprite-001",11,[[2,-79,[5,116,116]],[52,0,-80,[4,4278190335],24,25]]],[13,"Turbo_FX",12,[[2,-81,[5,116,116]],[4,-82,27]]],[0,["52eKzaGmJOCICDmiGf24Kp"]],[0,["aaiR2jnOJBjaU25HKsjtZw"]],[0,["abkNh6HU9EVYrYLwwj1oxv"]],[0,["1aqqTWn6BEO4Df+b8IbvTM"]],[0,["63UQtw8fxMaqe97X5iRKJY"]],[41,"Camera",2,[-83],[1,0,0,1000]],[54,0,1073741824,540,2000,6,41943040,35,[4,4278190080]]],0,[0,-1,3,0,-2,16,0,-3,17,0,-4,18,0,-5,19,0,3,1,0,0,2,0,8,36,0,0,2,0,0,2,0,-1,20,0,-2,21,0,-3,35,0,-4,4,0,-5,27,0,-6,11,0,-7,12,0,2,7,0,2,7,0,2,7,0,2,7,0,-1,14,0,-2,15,0,3,3,0,0,4,0,0,4,0,-1,22,0,-2,23,0,-3,24,0,-4,25,0,-5,26,0,-1,13,0,-4,16,0,-5,17,0,-6,18,0,-1,13,0,0,11,0,0,11,0,-1,28,0,0,12,0,0,12,0,-1,29,0,3,13,0,0,14,0,0,14,0,0,15,0,0,15,0,3,16,0,2,30,0,2,31,0,2,32,0,2,33,0,2,34,0,2,30,0,2,31,0,2,32,0,2,33,0,2,34,0,3,17,0,3,18,0,0,19,0,0,19,0,0,20,0,0,20,0,0,21,0,0,21,0,0,22,0,0,22,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,0,25,0,0,26,0,0,26,0,0,27,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,-1,36,0,13,5,1,10,5,2,10,5,83],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[4,4,4,1,1,11,4,4,11,4,1,1,1,6,1,1,6,1,6,1,6,1,1,1,6,1,1,1,1],[13,3,14,15,16,5,17,18,19,20,2,5,0,6,21,22,23,24,6,25,26,1,27,0,28,29,1,30,1]],[[[17,"Test",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"dissolveValue":0.34},"dissolveColor",8,[2,1.7,0.8,1,1],"u_dissolveMap",6,0]],11]]],0,0,[0,0],[14,7],[31,32]],[[{"name":"Mobile_Preview","rect":{"x":1089,"y":3,"width":390,"height":844},"offset":{"x":0,"y":0},"originalSize":{"width":390,"height":844},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[5],[4]],[[[69,[[70,"ShadowFlow",[[71,"ShadowStage"]]],[72,"ForwardFlow",1,[[73,"ForwardStage",[[74,["default"]],[75,true,1,["default"]]]]]]]]],0,0,[],[],[]]]]
